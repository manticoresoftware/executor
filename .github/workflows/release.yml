name: release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: 'manticore-executor'
  DOCKER_TAG: 'manticoresearch/manticore-executor'
  PHP_VERSION: '8.2.1'
  MAINTAINER: 'Manticore'
  DESC: 'Custom built PHP executor for Manticore.'
  EXTRA_NAME: 'manticore-extra'
  EXTRA_DESC: 'Manticore extra package that includes executor and columnar lib'
  COLUMNAR_NAME: 'manticore-columnar-lib'
  COLUMNAR_VERSION: '1.16.1'

jobs:
  build-artifact:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: amd64
            use_buildx: true
            run: ""
          - os: ubuntu-22.04
            arch: arm64
            use_buildx: true
            run: ""
          - os: macos-12
            arch: amd64
            use_buildx: false
            run: ./build-osx
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - id: vars
        run: |
          echo "::set-output name=app_version::$(echo ${{ github.ref_name }} | cut -dv -f2)"
          echo "::set-output name=rpm_suffix::_$( date +%y%m%d%H ).${GITHUB_SHA:0:7}"
          echo "::set-output name=deb_suffix::-$( date +%y%m%d%H )-${GITHUB_SHA:0:7}"
      - name: Set up QEMU
        if: ${{ matrix.use_buildx == true }}
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        if: ${{ matrix.use_buildx == true }}
        uses: docker/setup-buildx-action@v2
      - name: Build docker image
        if: ${{ matrix.use_buildx == true }}
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          load: true
          push: false
          tags: ${{ env.DOCKER_TAG }}:${{ steps.vars.outputs.app_version }}
          build-args: BUILD_DEV=0
      - name: Create artifact
        run: |
          [ -n "${{ matrix.run }}" ] && ${{ matrix.run }} ${{ env.PHP_VERSION }} || true
          APP_ARCH=${{ matrix.arch }} \
            APP_VERSION=${{ steps.vars.outputs.app_version }} \
            APP_NAME=${{ env.APP_NAME }} \
            RUNNER_OS="${{ runner.os }}" \
            DOCKER_IMAGE=${{ env.DOCKER_TAG }}:${{ steps.vars.outputs.app_version }} \
            ./collect-assets
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            *${{ matrix.arch }}.tar.gz

  build-linux-packages:
    needs:
      - build-artifact
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - id: vars
        run: |
          echo "::set-output name=app_version::$(echo ${{ github.ref_name }} | cut -dv -f2)"
          echo "::set-output name=rpm_suffix::_$( date +%y%m%d%H ).${GITHUB_SHA:0:7}"
          echo "::set-output name=deb_suffix::-$( date +%y%m%d%H )-${GITHUB_SHA:0:7}"
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact-ubuntu-22.04-amd64
      - name: Prepare packages structure
        run: |
          # name is like assets manticore-executor_v0.5.1-221214-e089052_linux_amd64:
          tar -xzf *.tar.gz

          # Setup openssl workaround
          mkdir -p .debpkg/DEBIAN
          cp -p packages/postrun .debpkg/DEBIAN/postinst

          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          mkdir -p .rpmpkg/usr/share/
          cp -p *_linux_amd64/${{ env.APP_NAME }} .debpkg/usr/bin/${{ env.APP_NAME }}
          chmod +x .debpkg/usr/bin/${{ env.APP_NAME }}
          # cp -p README.md .debpkg/README.md
          # cp -p LICENSE .debpkg/LICENSE
          cp -p *_linux_amd64/${{ env.APP_NAME }} .rpmpkg/usr/bin/${{ env.APP_NAME }}
          cp -p LICENSE .rpmpkg/usr/share/${{ env.APP_NAME }}-LICENSE
          cp -p README.md .rpmpkg/usr/share/${{ env.APP_NAME }}-README.md
      - uses: manticoresoftware/actions-build-deb-action@master
        with:
          package: ${{ env.APP_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.deb_suffix }}
          arch: 'amd64'
          desc: '${{ env.DESC }}'
          license: 'PHP-3.01'

      - name: Build RPM packages
        run: |
          sudo apt-get update -y -q
          sudo apt-get install -y rpm

          RPMBUILD_DIR="$HOME/rpmbuild"
          RPMBUILD_SOURCE_DIR="$RPMBUILD_DIR/SOURCES"
          RPMBUILD_SPEC_DIR="$RPMBUILD_DIR/SPECS"

          WORKDIR="/tmp/work"
          mkdir "$WORKDIR"
          spec_file=main.spec
          cp "packages/$spec_file" "$WORKDIR"
          cp -rp ".rpmpkg" "$WORKDIR/${{ env.APP_NAME }}"
          cd "$WORKDIR"

          # Prepare spec file for RPM
          sed -i 's/{{ NAME }}/${{ env.APP_NAME }}/g' $spec_file
          sed -i 's/{{ VERSION }}/${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}/g' $spec_file
          sed -i 's/{{ MAINTAINER }}/${{ env.MAINTAINER }}/g' $spec_file
          sed -i 's/{{ DESC }}/${{ env.DESC }}/g' $spec_file
          sed -i 's/{{ ARCH }}/x86_64/g' $spec_file
          # sed -i "s@{{ POSTRUN }}@$(<packages/postrun)@g" $spec_file

          tar czf tmp.tar.gz "${{ env.APP_NAME }}/"
          mkdir -p "$RPMBUILD_SOURCE_DIR"
          mkdir -p "$RPMBUILD_SPEC_DIR"
          mv tmp.tar.gz "$RPMBUILD_SOURCE_DIR"
          cp -p $spec_file "$RPMBUILD_SPEC_DIR"
          rpmbuild -bb "$RPMBUILD_SPEC_DIR/$spec_file"
          ls -lah "$RPMBUILD_DIR/RPMS/x86_64"/*.rpm
          cp -p "$RPMBUILD_DIR/RPMS/x86_64"/*.rpm $GITHUB_WORKSPACE
      - name: Rename packages to proper name
        run: |
          ls -lah ./*.rpm
          version=${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}
          rpm_path="./${{ env.APP_NAME }}-${version}-1.x86_64.rpm"
          cp $rpm_path "./${{ env.APP_NAME }}-${version}-1.el7.x86_64.rpm"
          cp $rpm_path "./${{ env.APP_NAME }}-${version}-1.el8.x86_64.rpm"
          mv $rpm_path "./${{ env.APP_NAME }}-${version}-1.el9.x86_64.rpm"

          ls -lah ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-deb-amd64
          path: |
            ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-rpm-amd64
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm

  build-linux-packages-arm64:
    needs:
      - build-artifact
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - id: vars
        run: |
          echo "::set-output name=app_version::$(echo ${{ github.ref_name }} | cut -dv -f2)"
          echo "::set-output name=rpm_suffix::_$( date +%y%m%d%H ).${GITHUB_SHA:0:7}"
          echo "::set-output name=deb_suffix::-$( date +%y%m%d%H )-${GITHUB_SHA:0:7}"
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact-ubuntu-22.04-arm64
      - name: Prepare package
        run: |
          # name is like assets manticore-executor_v0.5.1-221214-e089052_linux_arm64:
          tar -xzf *.tar.gz

          # Setup openssl workaround
          mkdir -p .debpkg/DEBIAN
          cp -p packages/postrun .debpkg/DEBIAN/postinst

          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          mkdir -p .rpmpkg/usr/share

          cp -p *_linux_arm64/${{ env.APP_NAME }} .debpkg/usr/bin/${{ env.APP_NAME }}
          cp -p *_linux_arm64/${{ env.APP_NAME }} .rpmpkg/usr/bin/${{ env.APP_NAME }}
          cp -p LICENSE .rpmpkg/usr/share/${{ env.APP_NAME }}-LICENSE
          cp -p README.md .rpmpkg/usr/share/${{ env.APP_NAME }}-README.md
      - uses: manticoresoftware/actions-build-deb-action@master
        with:
          package: ${{ env.APP_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.deb_suffix }}
          arch: 'arm64'
          desc: '${{ env.DESC }}'
          license: 'PHP-3.01'

      - name: Rename package to proper name
        run: |
          ls -lah ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-deb-arm64
          path: |
            ./*.deb
      - uses: manticoresoftware/actions-run-on-arch-action@master
        name: Preparing EL7 RPM package
        with:
          arch: aarch64
          distro: centos7
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts/packages"
            cp -rp .rpmpkg "${PWD}/artifacts/.rpmpkg"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          install: |
            yum install -y sudo git kernel-devel kernel-headers
            yum groupinstall -y "Development Tools"
          run: |
            RPMBUILD_DIR="$HOME/rpmbuild"
            RPMBUILD_SOURCE_DIR="$RPMBUILD_DIR/SOURCES"
            RPMBUILD_SPEC_DIR="$RPMBUILD_DIR/SPECS"
            WORKDIR="/tmp/work"
            mkdir "$WORKDIR"
            spec_file=main.spec
            cp "packages/$spec_file" "$WORKDIR"
            cp -rp "/artifacts/.rpmpkg" "$WORKDIR/${{ env.APP_NAME }}"
            cd "$WORKDIR"

            # Prepare spec file for RPM
            sed -i 's/{{ NAME }}/${{ env.APP_NAME }}/g' $spec_file
            sed -i 's/{{ VERSION }}/${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}/g' $spec_file
            sed -i 's/{{ MAINTAINER }}/${{ env.MAINTAINER }}/g' $spec_file
            sed -i 's/{{ DESC }}/${{ env.DESC }}/g' $spec_file
            sed -i 's/{{ ARCH }}/aarch64/g' $spec_file
            # sed -i "s@{{ POSTRUN }}@$(<packages/postrun)@g" $spec_file


            tar czf tmp.tar.gz "${{ env.APP_NAME }}/"
            mkdir -p "$RPMBUILD_SOURCE_DIR"
            mkdir -p "$RPMBUILD_SPEC_DIR"
            mv tmp.tar.gz "$RPMBUILD_SOURCE_DIR"
            cp -p $spec_file "$RPMBUILD_SPEC_DIR"
            rpmbuild -bb "$RPMBUILD_SPEC_DIR/$spec_file"
            cp -p "$RPMBUILD_DIR/RPMS/$(uname -m)"/*.rpm /artifacts/

      - name: Rename package to proper name
        run: |
          ls -lah ./artifacts/*.rpm
          version=${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}
          rpm_path="./artifacts/${{ env.APP_NAME }}-${version}-1.el7.aarch64.rpm"
          cp $rpm_path "./artifacts/${{ env.APP_NAME }}-${version}-1.el8.aarch64.rpm"
          cp $rpm_path "./artifacts/${{ env.APP_NAME }}-${version}-1.el9.aarch64.rpm"

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-rpm-arm64
          path: |
            ./artifacts/*.rpm
            !./artifacts/*-debuginfo-*.rpm

  build-extra-packages:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - id: vars
        run: |
          echo "::set-output name=app_version::$(echo ${{ github.ref_name }} | cut -dv -f2)"
          echo "::set-output name=rpm_suffix::_$( date +%y%m%d%H ).${GITHUB_SHA:0:7}"
          echo "::set-output name=deb_suffix::-$( date +%y%m%d%H )-${GITHUB_SHA:0:7}"
      - name: Prepare packages structure
        run: |
          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          mkdir -p .rpmpkg/usr/share
          cp -p extra.LICENSE .rpmpkg/usr/share/${{ env.EXTRA_NAME }}-LICENSE
      - uses: manticoresoftware/actions-build-deb-action@master
        name: Build DEB packages
        with:
          package: ${{ env.EXTRA_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.deb_suffix }}
          arch: 'all'
          desc: '${{ env.EXTRA_DESC }}'
          license: 'Apache-2.0'
          depends: '${{ env.APP_NAME }} (>= ${{ steps.vars.outputs.app_version }}), ${{ env.COLUMNAR_NAME }} (>= ${{ env. COLUMNAR_VERSION }}), ca-certificates'
      - name: Build RPM packages
        run: |
          sudo apt-get update -y -q
          sudo apt-get install -y rpm

          RPMBUILD_DIR="$HOME/rpmbuild"
          RPMBUILD_SOURCE_DIR="$RPMBUILD_DIR/SOURCES"
          RPMBUILD_SPEC_DIR="$RPMBUILD_DIR/SPECS"

          WORKDIR="/tmp/work"
          mkdir "$WORKDIR"
          spec_file=extra.spec
          cp "packages/$spec_file" "$WORKDIR"
          cp -rp ".rpmpkg" "$WORKDIR/${{ env.EXTRA_NAME }}"
          cd "$WORKDIR"

          # Prepare spec file for RPM
          sed -i 's/{{ NAME }}/${{ env.EXTRA_NAME }}/g' $spec_file
          sed -i 's/{{ VERSION }}/${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}/g' $spec_file
          sed -i 's/{{ MAINTAINER }}/${{ env.MAINTAINER }}/g' $spec_file
          sed -i 's/{{ DESC }}/${{ env.EXTRA_DESC }}/g' $spec_file
          sed -i 's/{{ EXECUTOR_NAME }}/${{ env.APP_NAME }}/g' $spec_file
          sed -i 's/{{ EXECUTOR_VERSION }}/${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}/g' $spec_file
          sed -i 's/{{ COLUMNAR_NAME }}/${{ env.COLUMNAR_NAME }}/g' $spec_file
          sed -i 's/{{ COLUMNAR_VERSION }}/${{ env.COLUMNAR_VERSION }}/g' $spec_file

          tar czf tmp.tar.gz "${{ env.EXTRA_NAME }}/"
          mkdir -p "$RPMBUILD_SOURCE_DIR"
          mkdir -p "$RPMBUILD_SPEC_DIR"
          mv tmp.tar.gz "$RPMBUILD_SOURCE_DIR"
          cp -p $spec_file "$RPMBUILD_SPEC_DIR"
          rpmbuild -bb "$RPMBUILD_SPEC_DIR/$spec_file"
          ls -lah "$RPMBUILD_DIR/RPMS/noarch"/*.rpm
          cp -p "$RPMBUILD_DIR/RPMS/noarch"/*.rpm $GITHUB_WORKSPACE

      - name: Rename packages to proper name
        run: |
          ls -lah ./*.rpm

          version=${{ steps.vars.outputs.app_version }}${{ steps.vars.outputs.rpm_suffix }}
          rpm_path="./${{ env.EXTRA_NAME }}-${version}-1.noarch.rpm"
          cp $rpm_path "./${{ env.EXTRA_NAME }}-${version}-1.el7.noarch.rpm"
          cp $rpm_path "./${{ env.EXTRA_NAME }}-${version}-1.el8.noarch.rpm"
          mv $rpm_path "./${{ env.EXTRA_NAME }}-${version}-1.el9.noarch.rpm"

          ls -lah ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-extra-deb
          path: |
            ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-extra-rpm
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm

  create-release:
    runs-on: ubuntu-22.04
    needs:
      - build-artifact
      - build-linux-packages
      - build-linux-packages-arm64
      - build-extra-packages
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate changelog
        run: |
          curl -sSL https://github.com/git-chglog/git-chglog/releases/download/v0.15.1/git-chglog_0.15.1_linux_amd64.tar.gz | tar -xzf -
          chmod +x git-chglog
          ./git-chglog --output ./CHANGELOG.md $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v3
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-22.04
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: amd64
            asset_name_suffix: linux_amd64.tar.gz
            asset_content_type: application/gzip
          - os: ubuntu-22.04
            arch: arm64
            asset_name_suffix: linux_arm64.tar.gz
            asset_content_type: application/gzip
          - os: macos-12
            arch: amd64
            asset_name_suffix: macos_amd64.tar.gz
            asset_content_type: application/gzip
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_path::$(ls *${{ matrix.asset_name_suffix }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_path }}
          asset_name: ${{ steps.vars.outputs.asset_path }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-linux-packages:
    runs-on: ubuntu-22.04
    needs: create-release
    strategy:
      matrix:
        include:
          - pkg: deb
            arch: amd64
            asset_content_type: application/vnd.debian.binary-package
          - pkg: deb
            arch: arm64
            asset_content_type: application/vnd.debian.binary-package
          - pkg: rpm
            arch: amd64
            asset_content_type: application/x-rpm
          - pkg: rpm
            arch: arm64
            asset_content_type: application/x-rpm
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.pkg }}-${{ matrix.arch }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-extra-packages:
    runs-on: ubuntu-22.04
    needs: create-release
    strategy:
      matrix:
        include:
          - pkg: deb
            asset_content_type: application/vnd.debian.binary-package
          - pkg: rpm
            asset_content_type: application/x-rpm
    steps:
      # We download amd64 only but just because of noarch
      - uses: actions/download-artifact@v3
        with:
          name: artifact-extra-${{ matrix.pkg }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - name: Prepare package names
        run: |
          file=$(ls *.${{ matrix.pkg }} | head -n 1)
          mv "$file" artifact
          rm -f *.${{ matrix.pkg }}
          file=${file/amd64/all}
          file=${file/x86_64/noarch}
          mv artifact "$file"
        shell: bash
      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}

  deploy:
    needs:
      - upload-release
      - upload-linux-packages
      - upload-extra-packages
    runs-on: self-hosted
    strategy:
      matrix:
        include:
          # manticore-executor first
          - artifact: artifact-deb-amd64
            ext: deb
            script: bin/upload_repo_deb
            distro: buster
          - artifact: artifact-deb-arm64
            ext: deb
            script: bin/upload_repo_deb
            distro: buster
          - artifact: artifact-deb-amd64
            ext: deb
            script: bin/upload_repo_deb
            distro: bionic
          - artifact: artifact-deb-arm64
            ext: deb
            script: bin/upload_repo_deb
            distro: bionic
          - artifact: artifact-deb-amd64
            ext: deb
            script: bin/upload_repo_deb
            distro: focal
          - artifact: artifact-deb-arm64
            ext: deb
            script: bin/upload_repo_deb
            distro: focal
          - artifact: artifact-deb-amd64
            ext: deb
            script: bin/upload_repo_deb
            distro: jammy
          - artifact: artifact-deb-arm64
            ext: deb
            script: bin/upload_repo_deb
            distro: jammy
          - artifact: artifact-deb-amd64
            ext: deb
            script: bin/upload_repo_deb
            distro: bullseye
          - artifact: artifact-deb-arm64
            ext: deb
            script: bin/upload_repo_deb
            distro: bullseye
          - artifact: artifact-deb-amd64
            ext: deb
            script: bin/upload_repo_deb
            distro: bookworm
          - artifact: artifact-deb-arm64
            ext: deb
            script: bin/upload_repo_deb
            distro: bookworm
          - artifact: artifact-rpm-amd64
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 7
          - artifact: artifact-rpm-arm64
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 7
          - artifact: artifact-rpm-amd64
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 8
          - artifact: artifact-rpm-arm64
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 8
          - artifact: artifact-rpm-amd64
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 9
          - artifact: artifact-rpm-arm64
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 9
          - artifact: artifact-macos-12-amd64
            ext: tar.gz
            script: bin/upload_repo_arc
            distro: ""
          # manticore-extra meta package now
          - artifact: artifact-extra-deb
            ext: deb
            script: bin/upload_repo_deb
            distro: buster
          - artifact: artifact-extra-deb
            ext: deb
            script: bin/upload_repo_deb
            distro: bionic
          - artifact: artifact-extra-deb
            ext: deb
            script: bin/upload_repo_deb
            distro: focal
          - artifact: artifact-extra-deb
            ext: deb
            script: bin/upload_repo_deb
            distro: jammy
          - artifact: artifact-extra-deb
            ext: deb
            script: bin/upload_repo_deb
            distro: bullseye
          - artifact: artifact-extra-deb
            ext: deb
            script: bin/upload_repo_deb
            distro: bookworm
          - artifact: artifact-extra-rpm
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 7
          - artifact: artifact-extra-rpm
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 8
          - artifact: artifact-extra-rpm
            ext: rpm
            script: bin/upload_repo_rpm
            distro: 9
    steps:
      - uses: actions/checkout@v3
      - run: mkdir build
      - uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: ./build

      - id: vars
        run: |
          echo "::set-output name=asset_name::$(ls ./build/*.${{ matrix.ext }} | head -n 1)"

      - name: Deploy package
        run: |
          export GPG_SECRET=${{ secrets.GPG_SECRET }}
          DISTRO=${{ matrix.distro }} ${{ matrix.script }}
        shell: bash
