name: release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  APP_NAME: 'manticore-executor'
  PHP_VERSION: '8.1.11'
  MAINTAINER: 'Manticore'
  DESC: 'Custom built PHP executor for Manticore.'

jobs:
  build-artifact:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - macos-12
        include:
          - os: ubuntu-22.04
            script_name: ./build-linux
          - os: macos-12
            script_name: ./build-osx
    steps:
      - uses: actions/checkout@v3
      - uses: ilammy/msvc-dev-cmd@v1.11.0
        with:
          uwp: true
      - name: Build binary
        run: ${{ matrix.script_name }} ${{ env.PHP_VERSION }}
      - name: Create artifact
        run: |
          os="${{ runner.os }}"
          assets="${{ env.APP_NAME }}_${{ github.ref_name }}_$( date +%y%m%d )-${GITHUB_SHA:0:7}_$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')_amd64"
          echo "$assets"
          mkdir -p "dist/$assets"
          if [[ "${{ runner.os }}" == Windows ]]; then
            mv php-src-php-${{ env.PHP_VERSION }}/dist/php.exe php-src-php-${{ env.PHP_VERSION }}/dist/${{ env.APP_NAME }}.exe
            cp php-src-php-${{ env.PHP_VERSION }}/dist/* "dist/$assets/"
          else
            cp php-src-php-${{ env.PHP_VERSION }}/dist/bin/php "dist/$assets/${{ env.APP_NAME }}"
          fi
          cp README.* "dist/$assets/"
          (
            cd dist
            if [[ "${{ runner.os }}" == Windows ]]; then
              7z a "$assets.zip" "$assets"
            else
              tar czf "$assets.tar.gz" "$assets"
            fi
            ls -lah *.*
          )
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifact-${{ matrix.os }}-amd64
          path: |
            dist/*.tar.gz
            dist/*.zip

  build-artifact-arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: manticoresoftware/actions-run-on-arch-action@master
        name: Build binary
        with:
          id: arm64
          arch: aarch64
          distro: ubuntu22.04
          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          install: |
            apt-get update -q -y
            apt-get install -y git sudo
          run: ./build-linux ${{ env.PHP_VERSION }}
      - name: Create artifact
        run: |
          os="${{ runner.os }}"
          assets="${{ env.APP_NAME }}_${{ github.ref_name }}_$( date +%y%m%d )-${GITHUB_SHA:0:7}_$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')_arm64"
          echo "$assets"
          mkdir -p "dist/$assets"
          cp php-src-php-${{ env.PHP_VERSION }}/dist/bin/php "dist/$assets/${{ env.APP_NAME }}"
          cp README.* "dist/$assets/"
          (
            cd dist
            tar czf "$assets.tar.gz" "$assets"
            ls -lah *.*
          )
        shell: bash
      - uses: actions/upload-artifact@v3
        with:
          name: artifact-ubuntu-22.04-arm64
          path: |
            dist/*.tar.gz

  build-linux-packages:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Build binary
        run: ./build-linux ${{ env.PHP_VERSION }}
      - id: vars
        run: |
          echo "::set-output name=app_version::$(echo ${{ github.ref }} | cut -d_ -f1)"
      - name: Prepare packages structure
        run: |
          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          cp -p php-src-php-${{ env.PHP_VERSION }}/dist/bin/php .debpkg/usr/bin/${{ env.APP_NAME }}
          cp -p php-src-php-${{ env.PHP_VERSION }}/dist/bin/php .rpmpkg/usr/bin/${{ env.APP_NAME }}
      - uses: manticoresoftware/actions-build-deb-action@master
        with:
          package: ${{ env.APP_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ steps.vars.outputs.app_version }}
          arch: 'amd64'
          desc: '${{ env.DESC }}'

      - uses: manticoresoftware/actions-build-rpm-action@master
        with:
          summary: '${{ env.DESC }}'
          package: ${{ env.APP_NAME }}
          package_root: .rpmpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ github.ref }}
          arch: 'x86_64'
          desc: '${{ env.DESC }}'

      - name: Rename packages to proper name
        run: |
          ls -la ./*.rpm
          version=$( echo ${{ github.ref_name }} | cut -c2- )
          rpm_path="./${{ env.APP_NAME }}-${version}-1.el7.x86_64.rpm"
          cp $rpm_path "./${{ env.APP_NAME }}-${version}-el7.x86_64.rpm"
          mv $rpm_path "./${{ env.APP_NAME }}-${version}-el8.x86_64.rpm"

          ls -la ./*.deb
          deb_path="./${{ env.APP_NAME }}_${version}_amd64.deb"
          mv "$deb_path" ./${{ env.APP_NAME }}_${version}-$( date +%y%m%d )-${GITHUB_SHA:0:7}_amd64.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-deb-amd64
          path: |
            ./*.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-rpm-amd64
          path: |
            ./*.rpm
            !./*-debuginfo-*.rpm

  build-linux-packages-arm64:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: manticoresoftware/actions-run-on-arch-action@master
        name: Build binary
        with:
          id: arm64
          arch: aarch64
          distro: ubuntu22.04
          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          install: |
            apt-get update -q -y
            apt-get install -y git sudo
          run: ./build-linux ${{ env.PHP_VERSION }}

      - name: Prepare package
        run: |
          mkdir -p .debpkg/usr/bin
          mkdir -p .rpmpkg/usr/bin
          cp -p php-src-php-${{ env.PHP_VERSION }}/dist/bin/php .debpkg/usr/bin/${{ env.APP_NAME }}
          cp -p php-src-php-${{ env.PHP_VERSION }}/dist/bin/php .rpmpkg/usr/bin/${{ env.APP_NAME }}

      - uses: manticoresoftware/actions-build-deb-action@master
        with:
          package: ${{ env.APP_NAME }}
          package_root: .debpkg
          maintainer: ${{ env.MAINTAINER }}
          version: ${{ github.ref }}
          arch: 'arm64'
          desc: '${{ env.DESC }}'

      - name: Rename package to proper name
        run: |
          ls -la ./*.deb
          version=$( echo ${{ github.ref_name }} | cut -c2- )
          deb_path="./${{ env.APP_NAME }}_${version}_arm64.deb"
          mv "$deb_path" ./${{ env.APP_NAME }}_${version}-$( date +%y%m%d )-${GITHUB_SHA:0:7}_arm64.deb

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-deb-arm64
          path: |
            ./*.deb

      - uses: manticoresoftware/actions-run-on-arch-action@master
        name: Preparing EL7 RPM package
        with:
          arch: aarch64
          distro: centos7
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          install: |
            yum install -y sudo git kernel-devel kernel-headers
            yum groupinstall -y "Development Tools"
          run: |
            RPMBUILD_DIR="$HOME/rpmbuild"
            RPMBUILD_SOURCE_DIR="$RPMBUILD_DIR/SOURCES"
            RPMBUILD_SPEC_DIR="$RPMBUILD_DIR/SPECS"
            mkdir -p .rpmpkg/usr/bin
            cp -p php-src-php-${{ env.PHP_VERSION }}/dist/bin/php .rpmpkg/usr/bin/${{ env.APP_NAME }}
            WORKDIR="/tmp/work"
            mkdir "$WORKDIR"
            cp packages/rpm.spec "$WORKDIR"
            cp -rp ".rpmpkg" "$WORKDIR/${{ env.APP_NAME }}"
            cd "$WORKDIR"

            # Prepare spec file for RPM
            sed -i 's/{{ NAME }}/${{ env.APP_NAME }}/g' rpm.spec
            sed -i 's/{{ VERSION }}/${{ github.ref_name }}/g' rpm.spec
            sed -i 's/{{ MAINTAINER }}/${{ env.MAINTAINER }}/g' rpm.spec
            sed -i 's/{{ DESC }}/${{ env.DESC }}/g' rpm.spec
            sed -i 's/{{ ARCH }}/aarch64/g' rpm.spec

            tar czf tmp.tar.gz "${{ env.APP_NAME }}/"
            mkdir -p "$RPMBUILD_SOURCE_DIR"
            mkdir -p "$RPMBUILD_SPEC_DIR"
            mv tmp.tar.gz "$RPMBUILD_SOURCE_DIR"
            cp -p rpm.spec "$RPMBUILD_SPEC_DIR"
            rpmbuild -bb "$RPMBUILD_SPEC_DIR/rpm.spec"
            cp -p "$RPMBUILD_DIR/RPMS/$(uname -m)"/*.rpm /artifacts/

      - name: Rename package to proper name
        run: |
          ls -la ./artifacts/*.rpm
          version=$( echo ${{ github.ref_name }} | cut -c2- )
          rpm_path="./artifacts/${{ env.APP_NAME }}-v${version}-1.el7.aarch64.rpm"
          cp $rpm_path "./artifacts/${{ env.APP_NAME }}-${version}-el7.aarch64.rpm"
          mv $rpm_path "./artifacts/${{ env.APP_NAME }}-${version}-el8.aarch64.rpm"

      - uses: actions/upload-artifact@v3
        with:
          name: artifact-rpm-arm64
          path: |
            ./artifacts/*.rpm
            !./artifacts/*-debuginfo-*.rpm

  create-release:
    runs-on: ubuntu-22.04
    needs:
      - build-artifact
      - build-artifact-arm64
      - build-linux-packages
      - build-linux-packages-arm64
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Generate changelog
        run: |
          curl -sSL https://github.com/git-chglog/git-chglog/releases/download/v0.15.1/git-chglog_0.15.1_linux_amd64.tar.gz | tar -xzf -
          chmod +x git-chglog
          ./git-chglog --output ./CHANGELOG.md $(git describe --tags $(git rev-list --tags --max-count=1))

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false

      - name: Write upload_url to file
        run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt

      - uses: actions/upload-artifact@v3
        with:
          name: create-release
          path: upload_url.txt

  upload-release:
    runs-on: ubuntu-22.04
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: amd64
            asset_name_suffix: linux_amd64.tar.gz
            asset_content_type: application/gzip
          - os: ubuntu-22.04
            arch: arm64
            asset_name_suffix: linux_arm64.tar.gz
            asset_content_type: application/gzip
          - os: macos-12
            arch: amd64
            asset_name_suffix: macos_amd64.tar.gz
            asset_content_type: application/gzip
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_path::$(ls *${{ matrix.asset_name_suffix }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_path }}
          asset_name: ${{ steps.vars.outputs.asset_path }}
          asset_content_type: ${{ matrix.asset_content_type }}

  upload-linux-packages:
    runs-on: ubuntu-22.04
    needs: create-release
    strategy:
      matrix:
        include:
          - pkg: deb
            arch: amd64
            asset_content_type: application/vnd.debian.binary-package
          - pkg: deb
            arch: arm64
            asset_content_type: application/vnd.debian.binary-package
          - pkg: rpm
            arch: amd64
            asset_content_type: application/x-rpm
          - pkg: rpm
            arch: arm64
            asset_content_type: application/x-rpm
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.pkg }}-${{ matrix.arch }}

      - uses: actions/download-artifact@v3
        with:
          name: create-release

      - id: vars
        run: |
          echo "::set-output name=upload_url::$(cat upload_url.txt)"
          echo "::set-output name=asset_name::$(ls *.${{ matrix.pkg }} | head -n 1)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.vars.outputs.upload_url }}
          asset_path: ${{ steps.vars.outputs.asset_name }}
          asset_name: ${{ steps.vars.outputs.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}

  deploy:
    needs:
      - upload-release
      - upload-linux-packages
    runs-on: self-hosted
    strategy:
      matrix:
        include:
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: stretch
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: stretch
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: buster
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: buster
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: xenial
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: xenial
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: bionic
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: bionic
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: focal
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: focal
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: jammy
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: jammy
          - pkg: deb
            script: bin/upload_repo_deb
            arch: amd64
            distro: bullseye
          - pkg: deb
            script: bin/upload_repo_deb
            arch: arm64
            distro: bullseye
          - pkg: rpm
            script: bin/upload_repo_rpm
            arch: amd64
            distro: 7
          - pkg: rpm
            script: bin/upload_repo_rpm
            arch: arm64
            distro: 7
          - pkg: rpm
            script: bin/upload_repo_rpm
            arch: amd64
            distro: 8
          - pkg: rpm
            script: bin/upload_repo_rpm
            arch: arm64
            distro: 8
          - pkg: macos-12
            script: bin/upload_repo_arc
            arch: amd64
            distro: ""
          # - pkg: windows
          #   script: bin/upload_repo_arc
          #   arch: amd64
          #   distro: ""
    steps:
      - uses: actions/checkout@v3
      - run: mkdir build
      - uses: actions/download-artifact@v3
        with:
          name: artifact-${{ matrix.pkg }}-${{ matrix.arch }}
          path: ./build

      - id: vars
        run: |
          echo "::set-output name=asset_name::$(ls ./build/*.${{ matrix.pkg }} | head -n 1)"

      - name: Deploy package
        run: |
          export GPG_SECRET=${{ secrets.GPG_SECRET }}
          DISTRO=${{ matrix.distro }} ${{ matrix.script }}
        shell: bash
